<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Err_ClauseBothDataDictData" xml:space="preserve">
    <value>Rule {0} Clause {1} contains both Data and DictData which is not allowed.</value>
  </data>
  <data name="Err_ClauseCharactersAfterClosedParentheses" xml:space="preserve">
    <value>Expression {0} in rule {1} contains invalid characters after a close parenthesis {2}</value>
  </data>
  <data name="Err_ClauseCharactersBeforeOpenParentheses" xml:space="preserve">
    <value>Expression {0} in rule {1} contains invalid characters before open parenthesis in label {2}</value>
  </data>
  <data name="Err_ClauseCharactersBetweenClosedParentheses" xml:space="preserve">
    <value>Expression {0} in rule {1} contains invalid characters between close parentheses in label {2}</value>
  </data>
  <data name="Err_ClauseCharactersBetweenOpenParentheses" xml:space="preserve">
    <value>Expression {0} in rule {1} contains invalid characters between open parentheses in label {2}</value>
  </data>
  <data name="Err_ClauseCloseParenthesesInNot" xml:space="preserve">
    <value>Expression {0} in rule {1} contains close parenthesis in NOT operator {2}</value>
  </data>
  <data name="Err_ClauseDictDataUnexpected" xml:space="preserve">
    <value>Rule {0} Clause {1} contains DictData which is innapropriate for operation {2}.</value>
  </data>
  <data name="Err_ClauseDuplicateName" xml:space="preserve">
    <value>Rule {0} has clauses with duplicate name {1}.")</value>
  </data>
  <data name="Err_ClauseEndsWithOperator" xml:space="preserve">
    <value>Expression {0} in rule {1} ends with an operator.</value>
  </data>
  <data name="Err_ClauseExpectedDateTime" xml:space="preserve">
    <value>Rule {0} Clause {1} does not contain exactly one DateTime in its Data field.</value>
  </data>
  <data name="Err_ClauseExpectedInt" xml:space="preserve">
    <value>Rule {0} Clause {1} does not contain exactly one integer in its Data field.</value>
  </data>
  <data name="Err_ClauseExpressionButMissingLabels" xml:space="preserve">
    <value>In rule {0} expression is not null but some clauses have no label.</value>
  </data>
  <data name="Err_ClauseInvalidLabel" xml:space="preserve">
    <value>Rule {0} has clauses invalid name {1}. Names may not contains spaces or parentheses.</value>
  </data>
  <data name="Err_ClauseInvalidLambda_{0}{1}{2}" xml:space="preserve">
    <value>Rule {0} Clause {1} has Invalid Lambda (Message: {2}).</value>
  </data>
  <data name="Err_ClauseMissingScript_{0}{1}" xml:space="preserve">
    <value>Rule {0} Clause {1} is missing required Script Data for Script operation.</value>
  </data>
  <data name="Err_ScriptingDisabled_{0}{1}" xml:space="preserve">
    <value>Rule {0} Clause {1} has Script but RunScripts is false.</value>
  </data>
  <data name="Err_ClauseInvalidNotOperator" xml:space="preserve">
    <value>Expression {0} in rule {1} contains NOT where a non-NOT operator was expected.</value>
  </data>
  <data name="Err_ClauseInvalidOperator" xml:space="preserve">
    <value>Expression {0} in rule {1} contains invalid boolean operator {2}</value>
  </data>
  <data name="Err_ClauseInvalidRegex" xml:space="preserve">
    <value>Rule {0} Clause {1} contains invalid Regex {2}.</value>
  </data>
  <data name="Err_ClauseMissingCustomOperation" xml:space="preserve">
    <value>Rule {0} Clause {1} has specified custom operation but the CustomOperation field is missing.</value>
  </data>
  <data name="Err_ClauseMissingLabels" xml:space="preserve">
    <value>In rule {0} if any clause has labels they all must have labels.</value>
  </data>
  <data name="Err_ClauseMissingListData" xml:space="preserve">
    <value>Rule {0} Clause {1} is missing Data List.</value>
  </data>
  <data name="Err_ClauseMissingValidationForOperation" xml:space="preserve">
    <value>Operation {0} in Clause {2} of Rule {1} was not validated by any of the available custom validation delegates.</value>
  </data>
  <data name="Err_ClauseMultipleConsecutiveNots" xml:space="preserve">
    <value>Expression {0} in rule {1} contains multiple NOTs in a row.</value>
  </data>
  <data name="Err_ClauseNoData" xml:space="preserve">
    <value>Rule {0} Clause {1} does not contain any Data and will always return false.</value>
  </data>
  <data name="Err_ClauseNoDataOrDictData" xml:space="preserve">
    <value>Rule {0} Clause {1} does not contain any Data or DictData and will always return false.</value>
  </data>
  <data name="Err_ClauseParenthesisInLabel" xml:space="preserve">
    <value>Expression {0} in rule {1} contains invalid parenthesis in label {2}</value>
  </data>
  <data name="Err_ClauseRedundantData" xml:space="preserve">
    <value>Rule {0} Clause {1} contains redundant Data field which will be ignored.</value>
  </data>
  <data name="Err_ClauseRedundantDictData" xml:space="preserve">
    <value>Rule {0} Clause {1} contains redundant DictData field which will be ignored.</value>
  </data>
  <data name="Err_ClauseUnbalancedParentheses" xml:space="preserve">
    <value>Expression {0} in rule {1} has unbalanced parentheses.</value>
  </data>
  <data name="Err_ClauseUndefinedLabel" xml:space="preserve">
    <value>Expression {0} in rule {1} contains undefined label {2}</value>
  </data>
  <data name="Err_ClauseUnexpectedDictData" xml:space="preserve">
    <value>Rule {0} Clause {1} contains unexpected Dictionary Data.</value>
  </data>
  <data name="Err_ClauseUnsuppportedOperator_{0}{1}{2}{3}" xml:space="preserve">
    <value>Rule {0} Clause {1} uses unsupported Operator {2}:{3}.</value>
  </data>
  <data name="Err_ClauseUnusedLabel" xml:space="preserve">
    <value>Clause {0} is declared but never used in rule {1}.</value>
  </data>
  <data name="Err_ValidationDelegateUndefined_{0}{1}{2}" xml:space="preserve">
    <value>Rule {0} Clause {1} has Operation {2} with undefined validation delegate.</value>
  </data>
  <data name="Err_NoOperation_{0}{1}" xml:space="preserve">
    <value>Rule {0}, Clause {1} is invalid as the Operator is set to NoOperation.</value>
  </data>
  <data name="Err_ErrorLoadingScriptingAssembly" xml:space="preserve">
    <value>Failed to load the OAT.Scripting assembly to enable scripting.</value>
  </data>
  <data name="Err_ExceptionLoadingScriptingAssembly_{0}" xml:space="preserve">
    <value>Exception hit while attempting to load OAT.Scripting assembly. The OAT.Scripting NuGet package is required to run scripts starting with 1.2. Exception message: {0}.</value>
  </data>
</root>
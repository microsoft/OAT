# Azure Pipelines
# https://aka.ms/yaml

name: OAT_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)
trigger:
  batch: true
  branches:
    include:
    - main
  paths:
    include:
    - OAT
    - OAT.Blazor
    - OAT.Blazor.Components
    
pr:
  branches:
    include:
    - main
  paths:
    include:
    - Pipelines
    - OAT
    - OAT.Blazor
    - OAT.Tests
    - OAT.sln
    - OAT.Blazor.Components

stages:
- stage: Test
  jobs:
  - template: templates/dotnet-test-job.yml
    parameters:
      projectPath: 'OAT.Tests/OAT.Tests.csproj'

- stage: SDL
  dependsOn: Test
  jobs:
  - template: templates/sdl-job.yml
    parameters:
      serviceTreeID: '2a6899f5-60b4-432d-8b83-40c0b2dacc0e'

- stage: Build
  dependsOn: Test
  jobs:
  - template: templates/nuget-build-job.yml
    parameters:
      jobName: 'pack_lib'
      projectPath: 'OAT/OAT.csproj'
      projectName: 'OAT'
  - template: templates/nuget-build-job.yml
    parameters:
      jobName: 'pack_scripting'
      projectPath: 'OAT/OAT.Scripting.csproj'
      projectName: 'OAT_Scripting'
  - template: templates/nuget-build-job.yml
    parameters:
      jobName: 'pack_blazor'
      projectPath: 'OAT.Blazor.Components/OAT.Blazor.Components.csproj'
      projectName: 'OAT_Blazor_Components'

- stage: Release
  dependsOn:
  - SDL
  - Build
  condition: and(succeeded(), in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI'))
  jobs:
  - job: sign_hash_release
    displayName: Code Sign, Generate Hashes, Publish Public Releases
    pool:
      vmImage: 'windows-latest'
    steps:
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '6.0.x'
    - script: 'dotnet tool install -g nbgv'
      displayName: 'Install GitVersioning'
    - task: PowerShell@2
      displayName: Set Release Version
      inputs:
        targetType: 'inline'
        script: |
          $version = (nbgv get-version -v AssemblyInformationalVersion).split('+')[0]
          Write-Host "##vso[task.setvariable variable=ReleaseVersion;]$version"
    - task: DownloadBuildArtifacts@0
      displayName: Download Unsigned Archives
      inputs:
        buildType: 'current'
        downloadType: 'specific'
        itemPattern: 'Unsigned_Binaries/*.zip'
        downloadPath: '$(Build.BinariesDirectory)'
    - task: ExtractFiles@1
      displayName: Extract Artifacts for Signing
      inputs:
        archiveFilePatterns: '$(Build.BinariesDirectory)\Unsigned_Binaries\*.zip'
        destinationFolder: '$(Build.BinariesDirectory)'
        cleanDestinationFolder: false
    - task: AntiMalware@3
      displayName: Anti-Malware Scan
      inputs:
        InputType: 'Basic'
        ScanType: 'CustomScan'
        FileDirPath: '$(Build.BinariesDirectory)'
        EnableServices: true
        SupportLogOnError: true
        TreatSignatureUpdateFailureAs: 'Warning'
        SignatureFreshness: 'UpToDate'
        TreatStaleSignatureAs: 'Warning'
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '2.1.804'
    - task: EsrpCodeSigning@1
      displayName: Code Sign Nuget Packages
      inputs:
        ConnectedServiceName: 'OAT_CodeSign'
        FolderPath: '$(Build.BinariesDirectory)'
        Pattern: '*.nupkg, *.snupkg'
        signConfigType: 'inlineSignParams'
        inlineOperation: |
          [
                  {
                      "KeyCode" : "CP-401405",
                      "OperationCode" : "NuGetSign",
                      "Parameters" : {},
                      "ToolName" : "sign",
                      "ToolVersion" : "1.0"
                  },
                  {
                      "KeyCode" : "CP-401405",
                      "OperationCode" : "NuGetVerify",
                      "Parameters" : {},
                      "ToolName" : "sign",
                      "ToolVersion" : "1.0"
                  }
              ]
        SessionTimeout: '60'
        MaxConcurrency: '50'
        MaxRetryAttempts: '5'
    - powershell: 'Get-ChildItem -Path ''$(Build.BinariesDirectory)'' -Recurse CodeSign* | foreach { Remove-Item -Path $_.FullName }'
      displayName: 'Delete Code Sign Summaries'
    - task: PowerShell@2
      displayName: Move NuGet Packages
      inputs:
        targetType: 'inline'
        script: |
          mv $env:BUILD_BINARIESDIRECTORY/*.nupkg $env:BUILD_STAGINGDIRECTORY/
          mv $env:BUILD_BINARIESDIRECTORY/*.snupkg $env:BUILD_STAGINGDIRECTORY/
    - task: PublishPipelineArtifact@1
      displayName: Pipeline Publish Signed Artifacts
      inputs:
        targetPath: '$(Build.StagingDirectory)'
        artifact: 'Signed_Binaries'
    - task: NuGetCommand@2
      displayName: Publish NuGet Packages
      inputs:
        command: 'push'
        packagesToPush: '$(Build.StagingDirectory)/*.nupkg'
        nuGetFeedType: 'external'
        publishFeedCredentials: 'CST-E Nuget CI'
        verbosityPush: 'Normal'
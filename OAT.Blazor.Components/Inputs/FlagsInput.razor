@using Microsoft.CST.OAT.Utils;

<div class="flags-input">
@{
    if (type != null)
    {
        var enums = Enum.GetValues(type);

        for (int i = 0; i < enums.Length; i++)
        {
            if (enums.GetValue(i) is Enum curEnum)
            {
                if (SubProperty is Enum val)
                {
                    <div class="form-check form-check-inline mr-2">
                        <input class="form-check-input" type="checkbox" disabled="@isDisabled" checked="@val.HasFlag(curEnum)" id="@curEnum" value="@curEnum" @onchange="eventArgs => { CheckboxClicked(curEnum, eventArgs.Value ?? false); }" data-input-type="flags-input"/>
                        <label class="form-check-label" for="@curEnum">@curEnum</label>
                    </div>
                }
            }
        }
    }
}
</div>

@code {
    [Parameter]
    public object? Object { get; set; }

    [Parameter]
    public string? SubPath { get; set; }

    [Parameter]
    public string id { get; set; } = string.Empty;

    [Parameter]
    public Type? type { get; set; }

    [Parameter]
    public bool isDisabled { get; set; }

    [Parameter]
    public Action onChangeAction { get; set; } = () => { };

    void CheckboxClicked(Enum enumValue, object checkedValue)
    {
        if (type is not null)
        {
            if ((bool)checkedValue)
            {
                if (type?.IsDefined(typeof(FlagsAttribute), false) is true)
                {
                    if (!(SubProperty?.HasFlag(enumValue) ?? false))
                    {
                        object val = SubProperty is null ? 0 : Convert.ChangeType(SubProperty, SubProperty.GetTypeCode());
                        object val2 = Convert.ChangeType(enumValue, enumValue.GetTypeCode());
                        if (val is int)
                        {
                            SubProperty = (Enum)Enum.ToObject(type, (int)val + (int)val2);
                        }
                        else if (val is long)
                        {
                            SubProperty = (Enum)Enum.ToObject(type, (long)val + (long)val2);
                        }
                        else if (val is byte)
                        {
                            SubProperty = (Enum)Enum.ToObject(type, (byte)val + (byte)val2);
                        }
                        else if (val is sbyte)
                        {
                            SubProperty = (Enum)Enum.ToObject(type, (sbyte)val + (sbyte)val2);
                        }
                        else if (val is short)
                        {
                            SubProperty = (Enum)Enum.ToObject(type, (short)val + (short)val2);
                        }
                        else if (val is ushort)
                        {
                            SubProperty = (Enum)Enum.ToObject(type, (ushort)val + (ushort)val2);
                        }
                        else if (val is uint)
                        {
                            SubProperty = (Enum)Enum.ToObject(type, (uint)val + (uint)val2);
                        }
                        else if (val is ulong)
                        {
                            SubProperty = (Enum)Enum.ToObject(type, (ulong)val + (ulong)val2);
                        }
                    }
                }
            }
            else
            {
                if (type?.IsDefined(typeof(FlagsAttribute), false) is true)
                {
                    if (SubProperty?.HasFlag(enumValue) ?? false)
                    {
                        object val = Convert.ChangeType(SubProperty, SubProperty.GetTypeCode());
                        object val2 = Convert.ChangeType(enumValue, enumValue.GetTypeCode());
                        if (val is int)
                        {
                            SubProperty = (Enum)Enum.ToObject(type, (int)val - (int)val2);
                        }
                        else if (val is long)
                        {
                            SubProperty = (Enum)Enum.ToObject(type, (long)val - (long)val2);
                        }
                        else if (val is byte)
                        {
                            SubProperty = (Enum)Enum.ToObject(type, (byte)val - (byte)val2);
                        }
                        else if (val is sbyte)
                        {
                            SubProperty = (Enum)Enum.ToObject(type, (sbyte)val - (sbyte)val2);
                        }
                        else if (val is short)
                        {
                            SubProperty = (Enum)Enum.ToObject(type, (short)val - (short)val2);
                        }
                        else if (val is ushort)
                        {
                            SubProperty = (Enum)Enum.ToObject(type, (ushort)val - (ushort)val2);
                        }
                        else if (val is uint)
                        {
                            SubProperty = (Enum)Enum.ToObject(type, (uint)val - (uint)val2);
                        }
                        else if (val is ulong)
                        {
                            SubProperty = (Enum)Enum.ToObject(type, (ulong)val - (ulong)val2);
                        }
                    }
                }
            }
        }
    }

    public Enum? SubProperty
    {
        get
        {
            if (Helpers.GetValueByPropertyOrFieldName(Object, SubPath) is Enum val)
            {
                return val;
            }
            return null; 
        }
        set
        {
            Helpers.SetValueByPropertyOrFieldName(Object, SubPath, value);
            onChangeAction.Invoke();
        }
    }
}
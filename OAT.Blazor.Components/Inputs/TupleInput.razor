@inherits BaseInput;
@using Microsoft.CST.OAT.Utils;
@using System.Reflection

<div class="object-fields">
    @foreach(var field in tupleFields)
    {
        var path = !string.IsNullOrEmpty(SubPath) ? $"{SubPath}.{field.Name}" : field.Name;
        var propId = $"{id}.{field.Name}";
        <div class="form-group">
            <label for="@propId"><b>@field.Name</b> : @field.FieldType.GetFriendlyName()</label>
            <PropertyInput id="@propId" Object="Object" SubPath="@path" type="field.FieldType" isDisabled="@isDisabled" onChangeAction="onChangeAction" />
        </div>
    }
</div>

@code {
    [Parameter]
    public Type? tupleType { get; set; }

    FieldInfo[] tupleFields
    {
        get
        {
            if (tupleType is not null && tupleType.IsGenericType && tupleType.IsAssignableTo(typeof(System.Runtime.CompilerServices.ITuple)))
            {
                return tupleType.GetFields();
            }
            return Array.Empty<FieldInfo>();
        }
    }
    Type[] tupleTypes = Array.Empty<Type>();
    int tupleLength { get; set; }

    public System.Runtime.CompilerServices.ITuple? SubProperty
    {
        get
        {
            if (Helpers.GetValueByPropertyOrFieldName(Object, SubPath) is System.Runtime.CompilerServices.ITuple val)
            {
                return val;
            }
            return null;
        }
        set
        {
            Helpers.SetValueByPropertyOrFieldName(Object, SubPath, value);
            onChangeAction.Invoke();
        }
    }
}
@using Microsoft.CST.OAT.Utils;
@using System.Reflection
@using Serilog
@using System.Collections

@if (SubProperty is IList ObjectList)
{
    @if (!ObjectList.IsFixedSize)
    {
        <div class="row">
            <div class="col">
                @if (NonScaffoldObject is not null)
                {
                    <PropertyInput Object="@this" SubPath="NonScaffoldObject" type="@itemType" id="@NonScaffoldId" onChangeAction="onChangeAction"/>
                }
                else
                {
                    <ScaffoldInput Object="@this" SubPath="ScaffoldedObject" id="@ScaffoldId" onChangeAction="onChangeAction" />
                }
            </div>
            <div class="col-4">
                <button @onclick="AddData">Add @itemType</button>
            </div>
        </div>
    }

    @if (ObjectList?.Count > 0)
    {
        <div class="row">
            <div class="col">
                <select class="form-control" @bind="SelectedIndex">
                    @for (int i = 0; i < ObjectList.Count; i++)
                    {
                        <option value="@i">@ObjectList[i]</option>
                    }
                </select>
                <PropertyInput id="@id" Object="@ObjectList" SubPath="@SelectedIndex.ToString()" type="ScaffoldedObject?.Constructor.DeclaringType" onChangeAction="onChangeAction" />
            </div>
            @if (!ObjectList.IsFixedSize)
            {
                <div class="col-4">
                    <button @onclick="RemoveData">Remove @buttonText</button>
                </div>
            }
        </div>
    }
}

@code {
    public Scaffold? ScaffoldedObject { get; set; }

    public object? NonScaffoldObject { get; set; }

    [Parameter]
    public object? Object { get; set; }

    [Parameter]
    public string? SubPath { get; set; }

    [Parameter]
    public string buttonText { get; set; } = "Object";

    [Parameter]
    public Type? listType { get; set; }

    [Parameter]
    public string id { get; set; } = string.Empty;

    [Parameter]
    public Action onChangeAction { get; set; } = () => { };

    public Type? itemType => listType?.GetGenericArguments()[0];

    int _selectedIndex = 0;

    int SelectedIndex
    {
        get => _selectedIndex;
        set
        {
            _selectedIndex = value;
            this.StateHasChanged();
        }
    }

    string ScaffoldId => $"{id}-scaffoldInput";
    string NonScaffoldId => $"{id}-nonScaffoldInput";

    void AddData(EventArgs eventArgs)
    {
        if (SubProperty == null)
        {
            Helpers.SetValueByPropertyOrFieldName(Object, SubPath, Helpers.GetDefaultValueForType(listType));
        }
        if (NonScaffoldObject is not null)
        {
            SubProperty?.Add(NonScaffoldObject);
        }
        else
        {
            var constructed = ScaffoldedObject?.Construct();
            if (constructed is not null)
            {
                SubProperty?.Add(constructed);
            }
        }

        Reset();
    }

    private void Reset()
    {
        var getDefault = Helpers.GetDefaultValueForType(itemType);
        if (getDefault is not null)
        {
            NonScaffoldObject = getDefault;
        }
        else
        {
            var allowedConstructors = new List<ConstructorInfo>();
            if (itemType is null)
            {
                return;
            }
            try
            {
                var constructors = itemType.GetConstructors(BindingFlags.Instance | BindingFlags.Public);

                foreach (var constructorItr in constructors)
                {
                    try
                    {
                        if (Helpers.ConstructedOfLoadedTypes(constructorItr))
                        {
                            allowedConstructors.Add(constructorItr);
                        }
                    }

                    catch (Exception e)
                    {
                        // Skip this constructor, we can't make it work.
                        Log.Debug($"Failed to parse constructor:{e.Message}. ({constructorItr.ToString()}");
                    }
                }
            }
            catch (Exception e)
            {
                Log.Debug($"Failed to parse type:{e.Message}. ({itemType.ToString()}");
            }
            if (allowedConstructors.Any())
            {
                var constructorToUse = allowedConstructors[0];
                ScaffoldedObject = new Scaffold(constructorToUse);
            }
        }
    }

    protected override void OnInitialized()
    {
        Reset();
        base.OnInitialized();
    }

    void RemoveData(EventArgs eventArgs)
    {
        SubProperty?.RemoveAt(SelectedIndex);
    }

    public System.Collections.IList? SubProperty
    {
        get
        {
            if (Helpers.GetValueByPropertyOrFieldName(Object, SubPath) is System.Collections.IList val)
            {
                return val;
            }
            return null;
        }
        set
        {
            Helpers.SetValueByPropertyOrFieldName(Object, SubPath, value);
            onChangeAction.Invoke();
        }
    }
}
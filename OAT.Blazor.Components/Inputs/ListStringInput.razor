@inherits BaseInput;
@using Microsoft.CST.OAT.Utils;

<div class="row">
    <div class="col">
        <input class="form-control" id="@id" type="text" @bind="CurrentInput" />
    </div>
    <div class="col-4">
        <button @onclick="AddData">Add @buttonText</button>
    </div>
</div>
@if (SubProperty?.Count > 0)
{
    <div class="row">
        <div class="col">
            <select class="form-control" @bind="SelectedIndex">
                @for (int i = 0; i < SubProperty.Count; i++)
                {
                    <option value="@i">@SubProperty[i]</option>
                }
            </select>
        </div>
        <div class="col-4">
            <button @onclick="RemoveData">Remove @buttonText</button>
        </div>
    </div>
}

@code {
    [Parameter]
    public string buttonText { get; set; } = "String";

    int SelectedIndex { get; set; }

    string CurrentInput { get; set; } = string.Empty;

    void AddData(EventArgs eventArgs)
    {
        if (SubProperty == null)
        {
            Helpers.SetValueByPropertyOrFieldName(Object, SubPath, new List<string>());
        }
        SubProperty?.Add(CurrentInput);
        CurrentInput = string.Empty;
    }

    void RemoveData(EventArgs eventArgs)
    {
        SubProperty?.RemoveAt(SelectedIndex);
    }


    public List<string>? SubProperty
    {
        get
        {
            if (Helpers.GetValueByPropertyOrFieldName(Object, SubPath) is List<string> val)
            {
                return val;
            }
            return null;
        }
        set
        {
            Helpers.SetValueByPropertyOrFieldName(Object, SubPath, value);
            onChangeAction.Invoke();
        }
    }
}
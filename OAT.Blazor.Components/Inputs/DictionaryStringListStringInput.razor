@using Microsoft.CST.OAT.Utils;
@using Serilog;
<div class="row">
    <div class="col">
        <input class="form-control" id="@id" type="text" @bind="CurrentInputKey" />
    </div>
    <div class="col">
        <ListStringInput id="@SubPath" Object="@this" SubPath="CurrentInputValue" />
    </div>
    <div class="col">
        <button class="btn-block" @onclick="AddEntry">Add @buttonText</button>
    </div>
</div>
@if (SubProperty?.Count > 0)
{
    <div class="row">
        <div class="col">
            <select class="form-control" @bind="SelectedKey">
                @foreach (var key in SubProperty.Keys)
                {
                    <option value="@key">@key : @SubProperty[key].Count items</option>
                }
            </select>
            @if (SubProperty.ContainsKey(SelectedKey))
            {
                <ListStringInput id="@SelectedListId" Object="@SubProperty" SubPath="@SelectedKey" /> 
            }
        </div>
        <div class="col-4">
            <button @onclick="RemoveEntry">Remove @buttonText</button>
        </div>
    </div>        
}

    @code {
    [Parameter]
    public object? Object { get; set; }

    [Parameter]
    public string? SubPath { get; set; }

    [Parameter]
    public string buttonText { get; set; } = "Dictionary Key And Value";

    [Parameter]
    public string id { get; set; } = string.Empty;

    [Parameter]
    public Action onChangeAction { get; set; } = () => { };

    string SelectedListId { get { return SubPath is null ? SubPath : $"{SubPath}.SelectedKeyStringListInput"; } }

    string SelectedKey { get; set; } = string.Empty;

    string CurrentInputKey { get; set; } = string.Empty;

    public List<string> CurrentInputValue { get; set; } = new List<string>();

    void RemoveEntry()
    {
        SubProperty?.Remove(SelectedKey);
        onChangeAction.Invoke();
    }

    void AddEntry()
    {
        if (SubProperty is null)
        {
            SubProperty = new Dictionary<string, List<string>>();
        }
        SubProperty[CurrentInputKey] = CurrentInputValue;
        CurrentInputKey = string.Empty;
        CurrentInputValue = new List<string>();
        onChangeAction.Invoke();
    }

    public Dictionary<string, List<String>>? SubProperty
    {
        get
        {
            if (Helpers.GetValueByPropertyOrFieldName(Object, SubPath) is Dictionary<string, List<string>> val)
            {
                return val;
            }
            return null;
        }
        set
        {
            Helpers.SetValueByPropertyOrFieldName(Object, SubPath, value);
            onChangeAction.Invoke();
        }
    }
}
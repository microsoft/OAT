@using System.Reflection;

<div class="scaffold-input">
@if (ShowConstructorSelect)
{
    string ConstructorSelectId = $"{SubPath}-Constructors";
    <div class="form-group">
        <label for="@ConstructorSelectId">Constructor to use:</label>
        <select class="form-control" id="@ConstructorSelectId" @bind="constructorToInvoke">
            @{
                if (constructors != null)
                {
                    @for (int i = 0; i < constructors.Count; i++)
                    {
                        <option value="@i">@constructors[i].ToString()</option>
                    }
                }
            }
        </select>
    </div>
}

@if (Scaffold is {})
{
    @for (int i = 0; i < Scaffold.Parameters.Count; i ++)
    {
        <div class="form-group">
            @if (Scaffold.Parameters[i].obj is Scaffold)
            {
                <label class="font-weight-bold" for="@PathFromKey(i)"><u>@Scaffold.Parameters[i].name</u> : @Scaffold.Parameters[i].type.Name</label>
                <ScaffoldInput Object="@Object" SubPath="@PathFromKey(i)" ShowConstructorSelect="ShowSubConstructorSelect" ShowSubConstructorSelect="ShowSubConstructorSelect" Assemblies="Assemblies" onChangeAction="onChangeAction"/>
        }
            else
            {
                @if ((Scaffold.Constructor.DeclaringType?.IsArray ?? false) && string.IsNullOrEmpty(Scaffold.Parameters[i].name))
                {
                    <label for="@PathFromKey(i)"><u>Length</u> : @Scaffold.Parameters[i].type.Name</label>
                }
                else
                {
                    <label for="@PathFromKey(i)"><u>@Scaffold.Parameters[i].name</u> : @Scaffold.Parameters[i].type.Name</label>
                }
                <PropertyInput id="@PathFromKey(i)" Object="@Object" SubPath="@PathFromKey(i)" type="@Scaffold.Parameters[i].type" onChangeAction="onChangeAction"/>
            }
        </div>
    }
}

</div>

@code {
    Scaffold? Scaffold
    {
        get
        {
            var obj = Helpers.GetValueByPropertyOrFieldName(Object, SubPath);
            return obj is Scaffold scaffold ? scaffold : null;
        }
        set
        {
            Helpers.SetValueByPropertyOrFieldName(Object, SubPath, value);
            onChangeAction.Invoke();
        }
    }

    int constructorToInvoke
    {
        get
        {
            return _constructorToInvoke;
        }
        set
        {
            _constructorToInvoke = value;
            if (constructors.Any())
            {
                Scaffold = new Scaffold(constructors[value]);
            }
            onChangeAction.Invoke();
        }
    }

    int _constructorToInvoke;

    List<ConstructorInfo> constructors
    {
        get
        {
            return Scaffold?.Constructor.DeclaringType?.GetConstructors().Where(x => Helpers.ConstructedOfLoadedTypes(x)).ToList() ?? new List<ConstructorInfo>();
        }
    }

    string PathFromKey(int key)
    {
        return $"{SubPath}.Parameters.{key}.Item2";
    }

    [Parameter]
    public object? Object { get; set; }

    [Parameter]
    public string? SubPath { get; set; }

    [Parameter]
    public bool ShowConstructorSelect { get; set; } = true;

    [Parameter]
    public bool ShowSubConstructorSelect { get; set; } = true;

    [Parameter]
    public Action onChangeAction { get; set; } = () => { };
}
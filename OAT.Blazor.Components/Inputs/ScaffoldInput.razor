@using System.Reflection;

<div class="scaffold-input">
@if (ShowConstructorSelect)
{
    string ConstructorSelectId = $"{SubPath}-Constructors";
    <div class="form-group">
        <label for="@ConstructorSelectId">Constructor to Create:</label>
        <select class="form-control" id="@ConstructorSelectId" @bind="constructorToInvoke">
            @{
                if (constructors != null)
                {
                    @for (int i = 0; i < constructors.Count; i++)
                    {
                        <option value="@i">@constructors[i].ToString()</option>
                    }
                }
            }
        </select>
    </div>
}

@foreach (var parameter in Scaffold?.Parameters ?? new Dictionary<string, (object?, Type)>())
{
    <div class="form-group">
        @if (parameter.Value.obj is Scaffold)
        {
            <label class="font-weight-bold" for="@PathFromKey(parameter.Key)"><u>@parameter.Key</u></label>
            <ScaffoldInput Object="@Object" SubPath="@PathFromKey(parameter.Key)" ShowConstructorSelect="ShowSubConstructorSelect" ShowSubConstructorSelect="ShowSubConstructorSelect" Assemblies="Assemblies" onChangeAction="onChangeAction"/>
        }
        else
        {
            <label for="@PathFromKey(parameter.Key)">@parameter.Key</label>
            <PropertyInput id="@PathFromKey(parameter.Key)" Object="@Object" SubPath="@PathFromKey(parameter.Key)" type="@parameter.Value.type" onChangeAction="onChangeAction"/>
        }
    </div>
}
</div>

@code {
    Scaffold? Scaffold
    {
        get
        {
            var obj = Helpers.GetValueByPropertyOrFieldName(Object, SubPath);
            return obj is Scaffold scaffold ? scaffold : null;
        }
        set
        {
            Helpers.SetValueByPropertyOrFieldName(Object, SubPath, value);
            onChangeAction?.Invoke();
        }
    }

    int constructorToInvoke
    {
        get
        {
            return _constructorToInvoke;
        }
        set
        {
            _constructorToInvoke = value;
            if (constructors.Any())
            {
                Scaffold = new Scaffold(constructors[value], Assemblies);
            }
            onChangeAction?.Invoke();
        }
    }

    int _constructorToInvoke;

    List<ConstructorInfo> constructors
    {
        get
        {
            return Scaffold?.Constructor.DeclaringType?.GetConstructors().Where(x => Helpers.ConstructedOfLoadedTypes(x, Assemblies)).ToList() ?? new List<ConstructorInfo>();
        }
    }

    string PathFromKey(string key)
    {
        return $"{SubPath}.Parameters.{key}";
    }

    [Parameter]
    public object? Object { get; set; }

    [Parameter]
    public string? SubPath { get; set; }

    [Parameter]
    public bool ShowConstructorSelect { get; set; } = true;

    [Parameter]
    public bool ShowSubConstructorSelect { get; set; } = true;

    [Parameter]
    public IEnumerable<Assembly>? Assemblies { get; set; } = null;

    [Parameter]
    public Action onChangeAction { get; set; } = () => { };
}
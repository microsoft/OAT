@using System.Collections
@if (type != null && unwrappedType != null)
{
    @if (useScaffold)
    {
        <ScaffoldInput id="@id" Object="this" SubPath="denullingScaffold" onChangeAction="@onChangeAction"/>
        <button @onclick="SetObject">Generate @type.FullName</button>
    }
    else
    {
        @if (Helpers.IsNullable(type) || IsNull)
        {
            <div class="form-check ml-2">
                <input class="form-check-input" type="checkbox" id="@id" @bind="IsNull" disabled="@isDisabled" />
                <label class="form-check-label" for="@id">Set to Null</label>
            </div>
        }

        @if (!IsNull && unwrappedType != null)
        {
            @if (unwrappedType.Equals(typeof(string)))
            {
                <StringInput id="@id" Object="Object" SubPath="@SubPath" isDisabled="@isDisabled" onChangeAction="@onChangeAction"/>
            }
            else if (unwrappedType.Equals(typeof(bool)))
            {
                <BoolInput id="@id" Object="Object" SubPath="@SubPath" isDisabled="@isDisabled" onChangeAction="@onChangeAction" />
            }
            else if (unwrappedType.Equals(typeof(int)))
            {
                <IntInput id="@id" Object="Object" SubPath="@SubPath" isDisabled="@isDisabled" onChangeAction="@onChangeAction"/>
            }
            else if (unwrappedType.Equals(typeof(DateTime)))
            {
                <DateTimeInput id="@id" Object="Object" SubPath="@SubPath" isDisabled="@isDisabled" onChangeAction="@onChangeAction"/>
            }
            else if (unwrappedType.Equals(typeof(uint)))
            {
                <UintInput id="@id" Object="Object" SubPath="@SubPath" isDisabled="@isDisabled" onChangeAction="@onChangeAction"/>
            }
            else if (unwrappedType.Equals(typeof(long)))
            {
                <LongInput id="@id" Object="Object" SubPath="@SubPath" isDisabled="@isDisabled" onChangeAction="@onChangeAction"/>
            }
            else if (unwrappedType.Equals(typeof(ulong)))
            {
                <UlongInput id="@id" Object="Object" SubPath="@SubPath" isDisabled="@isDisabled" onChangeAction="@onChangeAction"/>
            }
            else if (unwrappedType.Equals(typeof(short)))
            {
                <ShortInput id="@id" Object="Object" SubPath="@SubPath" isDisabled="@isDisabled" onChangeAction="@onChangeAction"/>
            }
            else if (unwrappedType.Equals(typeof(ushort)))
            {
                <UshortInput id="@id" Object="Object" SubPath="@SubPath" isDisabled="@isDisabled" onChangeAction="@onChangeAction"/>
            }
            else if (unwrappedType.Equals(typeof(byte)))
            {
                <ByteInput id="@id" Object="Object" SubPath="@SubPath" isDisabled="@isDisabled" onChangeAction="@onChangeAction"/>
            }
            else if (unwrappedType.Equals(typeof(char)))
            {
                <CharInput id="@id" Object="Object" SubPath="@SubPath" isDisabled="@isDisabled" onChangeAction="@onChangeAction"/>
            }
            else if (unwrappedType.Equals(typeof(float)))
            {
                <FloatInput id="@id" Object="Object" SubPath="@SubPath" isDisabled="@isDisabled" onChangeAction="@onChangeAction"/>
            }
            else if (unwrappedType.Equals(typeof(double)))
            {
                <DoubleInput id="@id" Object="Object" SubPath="@SubPath" isDisabled="@isDisabled" onChangeAction="@onChangeAction"/>
            }
            else if (unwrappedType.Equals(typeof(decimal)))
            {
                <DecimalInput id="@id" Object="Object" SubPath="@SubPath" isDisabled="@isDisabled" onChangeAction="@onChangeAction"/>
            }
            else if (unwrappedType.Equals(typeof(Scaffold)))
            {
                <ScaffoldInput id="@id" Object="Object" SubPath="@SubPath" onChangeAction="@onChangeAction"/>
            }
            else if (unwrappedType.IsAssignableTo(typeof(System.Runtime.CompilerServices.ITuple)))
            {
                <TupleInput id="@id" Object="Object" SubPath="@SubPath" tupleType="unwrappedType" onChangeAction="@onChangeAction" />
            }
            else if (unwrappedType.IsEnum)
            {
                if (unwrappedType.IsDefined(typeof(FlagsAttribute), false))
                {
                    <FlagsInput id="@id" Object="Object" SubPath="@SubPath" type="@unwrappedType" isDisabled="@isDisabled" onChangeAction="@onChangeAction"/>
                }
                else
                {
                    <EnumInput id="@id" Object="Object" SubPath="@SubPath" type="@unwrappedType" isDisabled="@isDisabled" onChangeAction="@onChangeAction"/>
                }
            }
            // The underlying components only support 1 dimensional arrays
            else if ((unwrappedType.IsArray && unwrappedType.GetConstructors()[0].GetParameters().Length == 1) || (unwrappedType.IsGenericType && unwrappedType.IsAssignableTo(typeof(IList))))
            {
                var listType = unwrappedType.GetElementType() is Type eleType ? eleType : unwrappedType.GetGenericArguments()[0];
                if (listType.Equals(typeof(byte)))
                {
                    <ByteArrayInput id="@id" Object="Object" SubPath="@SubPath" placeholder="Base64Encoded Bytes" onChangeAction="@onChangeAction" />
                }
                else
                {
                    <ListObjectInput id="@id" Object="Object" SubPath="@SubPath" listType="@unwrappedType" buttonText="@listType.GetFriendlyName()" onChangeAction="@onChangeAction" />
                }
            }
            else if (unwrappedType.IsGenericType && unwrappedType.IsAssignableTo(typeof(IDictionary)))
            {
                var dkt = unwrappedType.GetGenericArguments()[0];
                var dvt = unwrappedType.GetGenericArguments()[1];
                var buttonText = $"{dkt.GetFriendlyName()} and {dvt.GetFriendlyName()} pair.";
                <DictionaryObjectObject id="@id" Object="Object" SubPath="@SubPath" dictionaryType="@unwrappedType" buttonText="@buttonText" onChangeAction="@onChangeAction"/>
            }
            else
            {
                <ObjectInput id="@id" Object="Object" SubPath="@SubPath" onChangeAction="@onChangeAction"/>
            }
        }
    }
}

@code {
    [Parameter]
    public object? Object { get; set; }

    [Parameter]
    public string? SubPath { get; set; }

    [Parameter]
    public string id { get; set; } = string.Empty;

    [Parameter]
    public Type? type { get; set; }

    [Parameter]
    public bool isDisabled { get; set; }

    [Parameter]
    public Action onChangeAction { get; set; } = () => { };

    public Type? unwrappedType { get; set; }

    object? oldValue = null;

    public Scaffold? denullingScaffold { get; set; }

    bool useScaffold { get; set; }

    void SetObject()
    {
        try
        {
            if (denullingScaffold?.Construct() is { } nonNull)
            {
                Helpers.SetValueByPropertyOrFieldName(Object, SubPath, nonNull);
            } 
        }
        catch(Exception e)
        {
        }
        useScaffold = false;
    }

    protected override void OnInitialized()
    {
        if (Helpers.IsNullable(type))
        {
            unwrappedType = type is not null ? Nullable.GetUnderlyingType(type) : null;
        }
        else
        {
            unwrappedType = type;
        }
        base.OnInitialized();
    }

    public bool IsNull
    {
        get
        {
            return Helpers.GetValueByPropertyOrFieldName(Object, SubPath) is null;
        }
        set
        {
            if (value is true)
            {
                oldValue = Helpers.GetValueByPropertyOrFieldName(Object, SubPath);
                Helpers.SetValueByPropertyOrFieldName(Object, SubPath, null);
            }
            else
            {
                if (oldValue != null)
                {
                    Helpers.SetValueByPropertyOrFieldName(Object, SubPath, oldValue);
                }
                else
                {
                    if (type is not null)
                    {
                        var denulled = Nullable.GetUnderlyingType(type) ?? type;
                        object? newValue = Helpers.GetDefaultValueForType(denulled);

                        if (newValue is null)
                        {
                            var ctrs = Helpers.GetConstructors(denulled);
                            if (ctrs.Any())
                            {
                                useScaffold = true;
                                denullingScaffold = new Scaffold(ctrs[0]);
                            }
                        }
                        else
                        {
                            Helpers.SetValueByPropertyOrFieldName(Object, SubPath, newValue);
                        }
                    }
                }
            }
            onChangeAction.Invoke();
        }
    }
}

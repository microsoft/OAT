@if (type != null && unwrappedType != null)
{
    @if (Helpers.IsNullable(type) || IsNull)
    {
        <div class="form-check form-check-inline ml-2">
            <input class="form-check-input" type="checkbox" id="@id" @bind="IsNull" />
            <label class="form-check-label" for="@id">Set to Null</label>
        </div>
    }

    @if (!IsNull && unwrappedType != null)
    {
        @if (unwrappedType.Equals(typeof(string)))
        {
            <StringInput id="@id" Object="Object" SubPath="@SubPath" />
        }
        else if (unwrappedType.Equals(typeof(bool)))
        {
            <BoolInput id="@id" Object="Object" SubPath="@SubPath" />
        }
        else if (unwrappedType.Equals(typeof(int)))
        {
            <IntInput id="@id" Object="Object" SubPath="@SubPath" />
        }
        else if (unwrappedType.IsEnum)
        {
            if (unwrappedType.IsDefined(typeof(FlagsAttribute), false))
            {
                <FlagsInput id="@id" Object="Object" SubPath="@SubPath" type="@unwrappedType" />
            }
            else
            {
                <EnumInput id="@id" Object="Object" SubPath="@SubPath" type="@unwrappedType" />
            }
        }
        else if (unwrappedType.Equals(typeof(DateTime)))
        {
            <DateTimeInput id="@id" Object="Object" SubPath="@SubPath" />
        }
        else if (unwrappedType.IsGenericType && unwrappedType.GetGenericTypeDefinition() == typeof(List<>))
        {
            var args = unwrappedType.GetGenericArguments();
            if (args.Any())
            {
                var listType = args[0];
                if (listType.Equals(typeof(string)))
                {
                    <ListStringInput id="@id" Object="Object" SubPath="@SubPath" />
                }
                else if (listType.Equals(typeof(List<KeyValuePair<string, string>>)))
                {
                    <ListKvpStringStringInput id="@id" Object="Object" SubPath="@SubPath" />
}
                else if (listType.IsEnum)
                {
                    if (listType.IsDefined(typeof(FlagsAttribute), false))
                    {
                        <ListFlagsInput id="@id" Object="Object" SubPath="@SubPath" enumType="@listType" />
                    }
                    else
                    {
                        <ListEnumInput id="@id" Object="Object" SubPath="@SubPath" enumType="@listType" />
                    }
                }
            }            
        }
        else if (unwrappedType.Equals(typeof(List<string>)))
        {
        }
        else if (unwrappedType.Equals(typeof(List<KeyValuePair<string, string>>)))
        {
        }
        else if (unwrappedType.Equals(typeof(Dictionary<string,string>)))
        {
            <DictionaryStringStringInput id="@id" Object="Object" SubPath="@SubPath" />
        }
        else if (unwrappedType.Equals(typeof(Dictionary<string,List<string>>)))
        {
            <DictionaryStringListStringInput id="@id" Object="Object" SubPath="@SubPath" />
        }
        else if (unwrappedType.Equals(typeof(uint)))
        {
            <UintInput id="@id" Object="Object" SubPath="@SubPath" />
        }
        else if (unwrappedType.Equals(typeof(long)))
        {
            <LongInput id="@id" Object="Object" SubPath="@SubPath" />
        }
        else if (unwrappedType.Equals(typeof(ulong)))
        {
            <UlongInput id="@id" Object="Object" SubPath="@SubPath" />
        }
        else if (unwrappedType.Equals(typeof(short)))
        {
            <ShortInput id="@id" Object="Object" SubPath="@SubPath" />
        }
        else if (unwrappedType.Equals(typeof(ushort)))
        {
            <UshortInput id="@id" Object="Object" SubPath="@SubPath" />
        }
        else if (unwrappedType.Equals(typeof(byte)))
        {
            <ByteInput id="@id" Object="Object" SubPath="@SubPath" />
        }
        else if (unwrappedType.Equals(typeof(char)))
        {
            <CharInput id="@id" Object="Object" SubPath="@SubPath" />
        }
        else if (unwrappedType.Equals(typeof(float)))
        {
            <FloatInput id="@id" Object="Object" SubPath="@SubPath" />
        }
        else if (unwrappedType.Equals(typeof(double)))
        {
            <DoubleInput id="@id" Object="Object" SubPath="@SubPath" />
        }
        else if (unwrappedType.Equals(typeof(decimal)))
        {
            <DecimalInput id="@id" Object="Object" SubPath="@SubPath" />
        }
        else if (unwrappedType.Equals(typeof(Scaffold)))
        {
            <ScaffoldInput Object="Object" SubPath="@SubPath" />
        }
        else
        {
            <ObjectInput id="@id" Object="Object" SubPath="@SubPath" />
        }
    }
}

@code {
    [Parameter]
    public object? Object { get; set; }

    [Parameter]
    public string? SubPath { get; set; }

    [Parameter]
    public string id { get; set; } = string.Empty;

    [Parameter]
    public Type? type { get; set; }

    public Type? unwrappedType { get; set; }

    object? oldValue = null;

    protected override void OnInitialized()
    {
        if (Helpers.IsNullable(type))
        {
            unwrappedType = type is not null ? Nullable.GetUnderlyingType(type) : null;
        }
        else
        {
            unwrappedType = type;
        }
        base.OnInitialized();
    }

    public bool IsNull
    {
        get
        {
            return Helpers.GetValueByPropertyOrFieldName(Object, SubPath) is null;
        }
        set
        {
            if (value is true)
            {
                oldValue = Helpers.GetValueByPropertyOrFieldName(Object, SubPath);
                Helpers.SetValueByPropertyOrFieldName(Object, SubPath, null);
            }
            else
            {
                if (oldValue != null)
                {
                    Helpers.SetValueByPropertyOrFieldName(Object, SubPath, oldValue);
                }
                else
                {
                    if (type is not null)
                    {
                        var denulled = Nullable.GetUnderlyingType(type);
                        if (denulled is not null)
                        {
                            Helpers.SetValueByPropertyOrFieldName(Object, SubPath, Helpers.GetDefaultValueForType(denulled));
                        }
                        else
                        {
                            Helpers.SetValueByPropertyOrFieldName(Object, SubPath, Helpers.GetDefaultValueForType(type));
                        }
                    }
                }
            }
        }
    }
}

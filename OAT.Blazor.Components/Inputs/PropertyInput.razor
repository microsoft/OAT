@inherits BaseInput;
@using System.Collections

@if (type is Type NotNullType && unwrappedType is Type NotNullUnwrappedType)
{
    @if (useScaffold)
    {
        <ScaffoldInput id="@id" Object="this" SubPath="denullingScaffold" onChangeAction="@onChangeAction"/>
        <button @onclick="SetObject">Generate @NotNullType.FullName</button>
    }
    else
    {
        @if (Helpers.IsNullable(NotNullType) || IsNull)
        {
            <div class="form-check ml-2">
                <input class="form-check-input" type="checkbox" id="@id" @bind="IsNull" disabled="@isDisabled" />
                <label class="form-check-label" for="@id">Set to Null</label>
            </div>
        }

        @if (!IsNull && NotNullUnwrappedType != null)
        {
            @if (NotNullUnwrappedType.Equals(typeof(string)))
            {
                <StringInput id="@id" Object="Object" SubPath="@SubPath" isDisabled="@isDisabled" onChangeAction="@onChangeAction"/>
            }
            else if (NotNullUnwrappedType.Equals(typeof(bool)))
            {
                <BoolInput id="@id" Object="Object" SubPath="@SubPath" isDisabled="@isDisabled" onChangeAction="@onChangeAction" />
            }
            else if (NotNullUnwrappedType.Equals(typeof(int)))
            {
                <IntInput id="@id" Object="Object" SubPath="@SubPath" isDisabled="@isDisabled" onChangeAction="@onChangeAction"/>
            }
            else if (NotNullUnwrappedType.Equals(typeof(DateTime)))
            {
                <DateTimeInput id="@id" Object="Object" SubPath="@SubPath" isDisabled="@isDisabled" onChangeAction="@onChangeAction"/>
            }
            else if (NotNullUnwrappedType.Equals(typeof(uint)))
            {
                <UintInput id="@id" Object="Object" SubPath="@SubPath" isDisabled="@isDisabled" onChangeAction="@onChangeAction"/>
            }
            else if (NotNullUnwrappedType.Equals(typeof(long)))
            {
                <LongInput id="@id" Object="Object" SubPath="@SubPath" isDisabled="@isDisabled" onChangeAction="@onChangeAction"/>
            }
            else if (NotNullUnwrappedType.Equals(typeof(ulong)))
            {
                <UlongInput id="@id" Object="Object" SubPath="@SubPath" isDisabled="@isDisabled" onChangeAction="@onChangeAction"/>
            }
            else if (NotNullUnwrappedType.Equals(typeof(short)))
            {
                <ShortInput id="@id" Object="Object" SubPath="@SubPath" isDisabled="@isDisabled" onChangeAction="@onChangeAction"/>
            }
            else if (NotNullUnwrappedType.Equals(typeof(ushort)))
            {
                <UshortInput id="@id" Object="Object" SubPath="@SubPath" isDisabled="@isDisabled" onChangeAction="@onChangeAction"/>
            }
            else if (NotNullUnwrappedType.Equals(typeof(byte)))
            {
                <ByteInput id="@id" Object="Object" SubPath="@SubPath" isDisabled="@isDisabled" onChangeAction="@onChangeAction"/>
            }
            else if (NotNullUnwrappedType.Equals(typeof(char)))
            {
                <CharInput id="@id" Object="Object" SubPath="@SubPath" isDisabled="@isDisabled" onChangeAction="@onChangeAction"/>
            }
            else if (NotNullUnwrappedType.Equals(typeof(float)))
            {
                <FloatInput id="@id" Object="Object" SubPath="@SubPath" isDisabled="@isDisabled" onChangeAction="@onChangeAction"/>
            }
            else if (NotNullUnwrappedType.Equals(typeof(double)))
            {
                <DoubleInput id="@id" Object="Object" SubPath="@SubPath" isDisabled="@isDisabled" onChangeAction="@onChangeAction"/>
            }
            else if (NotNullUnwrappedType.Equals(typeof(decimal)))
            {
                <DecimalInput id="@id" Object="Object" SubPath="@SubPath" isDisabled="@isDisabled" onChangeAction="@onChangeAction"/>
            }
            else if (NotNullUnwrappedType.Equals(typeof(Scaffold)))
            {
                <ScaffoldInput id="@id" Object="Object" SubPath="@SubPath" onChangeAction="@onChangeAction"/>
            }
            else if (NotNullUnwrappedType.IsAssignableTo(typeof(System.Runtime.CompilerServices.ITuple)))
            {
                <TupleInput id="@id" Object="Object" SubPath="@SubPath" tupleType="NotNullUnwrappedType" onChangeAction="@onChangeAction" isDisabled="@isDisabled" />
            }
            else if (NotNullUnwrappedType.IsEnum)
            {
                if (NotNullUnwrappedType.IsDefined(typeof(FlagsAttribute), false))
                {
                    <FlagsInput id="@id" Object="Object" SubPath="@SubPath" type="@NotNullUnwrappedType" isDisabled="@isDisabled" onChangeAction="@onChangeAction"/>
                }
                else
                {
                    <EnumInput id="@id" Object="Object" SubPath="@SubPath" type="@NotNullUnwrappedType" isDisabled="@isDisabled" onChangeAction="@onChangeAction"/>
}
            }
            else if (NotNullUnwrappedType.IsGenericType && NotNullUnwrappedType.GetGenericTypeDefinition() == typeof(KeyValuePair<,>))
            {
                var types = NotNullUnwrappedType.GetGenericArguments();
                var keyId = $"{id}.Key";
                var valueId = $"{id}.Value";
                var keyPath = $"{SubPath}.Key";
                var valuePath = $"{SubPath}.Value";

                <PropertyInput id="@keyId" Object="Object" SubPath="@keyPath" type="@types[0]" isDisabled="true" onChangeAction="@onChangeAction" />
                <PropertyInput id="@valueId" Object="Object" SubPath="@valuePath" type="@types[1]" isDisabled="true" onChangeAction="@onChangeAction" />
            }
            // The underlying components only support 1 dimensional arrays
            else if ((NotNullUnwrappedType.IsArray && NotNullUnwrappedType.GetConstructors()[0].GetParameters().Length == 1) || (NotNullUnwrappedType.IsGenericType && NotNullUnwrappedType.IsAssignableTo(typeof(IList))))
            {
                var listType = NotNullUnwrappedType.GetElementType() is Type eleType ? eleType : NotNullUnwrappedType.GetGenericArguments()[0];
                if (listType.Equals(typeof(byte)))
                {
                    <ByteArrayInput id="@id" Object="Object" SubPath="@SubPath" placeholder="Base64Encoded Bytes" isDisabled="@isDisabled" onChangeAction="@onChangeAction" />
                }
                else
                {
                    <ListObjectInput id="@id" Object="Object" SubPath="@SubPath" listType="@NotNullUnwrappedType" buttonText="@listType.GetFriendlyName()" isDisabled="@isDisabled" onChangeAction="@onChangeAction" />
                }
            }
            else if (NotNullUnwrappedType.IsGenericType && NotNullUnwrappedType.IsAssignableTo(typeof(IDictionary)))
            {
                var dkt = NotNullUnwrappedType.GetGenericArguments()[0];
                var dvt = NotNullUnwrappedType.GetGenericArguments()[1];
                var buttonText = $"{dkt.GetFriendlyName()} and {dvt.GetFriendlyName()} pair.";
                <DictionaryObjectObject id="@id" Object="Object" SubPath="@SubPath" dictionaryType="@NotNullUnwrappedType" buttonText="@buttonText" isDisabled="@isDisabled" onChangeAction="@onChangeAction"/>
            }
            else
            {
                <ObjectInput id="@id" Object="Object" SubPath="@SubPath" isDisabled="@isDisabled" onChangeAction="@onChangeAction"/>
            }
        }
    }
}


@code {
    Type? _type;

    [Parameter]
    public Type? type { get; set; }

    public Type? unwrappedType
    {
        get
        {
            if (Helpers.IsNullable(type))
            {
                return type is not null ? Nullable.GetUnderlyingType(type) : null;
            }
            else
            {
                return type;
            }
        }
    }

    object? oldValue = null;

    public Scaffold? denullingScaffold { get; set; }

    bool useScaffold { get; set; }

    void SetObject()
    {
        try
        {
            if (denullingScaffold?.Construct() is { } nonNull)
            {
                Helpers.SetValueByPropertyOrFieldName(Object, SubPath, nonNull);
            } 
        }
        catch(Exception)
        {
            // We failed to construct the item.
        }
        useScaffold = false;
    }

    public bool IsNull
    {
        get
        {
            return Helpers.GetValueByPropertyOrFieldName(Object, SubPath) is null;
        }
        set
        {
            if (value is true)
            {
                oldValue = Helpers.GetValueByPropertyOrFieldName(Object, SubPath);
                Helpers.SetValueByPropertyOrFieldName(Object, SubPath, null);
            }
            else
            {
                if (oldValue != null)
                {
                    Helpers.SetValueByPropertyOrFieldName(Object, SubPath, oldValue);
                }
                else
                {
                    if (type is not null)
                    {
                        var denulled = Nullable.GetUnderlyingType(type) ?? type;
                        object? newValue = Helpers.GetDefaultValueForType(denulled);

                        if (newValue is null)
                        {
                            var ctrs = Helpers.GetConstructors(denulled);
                            if (ctrs.Any())
                            {
                                useScaffold = true;
                                denullingScaffold = new Scaffold(ctrs[0]);
                            }
                        }
                        else
                        {
                            Helpers.SetValueByPropertyOrFieldName(Object, SubPath, newValue);
                        }
                    }
                }
            }
            onChangeAction.Invoke();
        }
    }
}

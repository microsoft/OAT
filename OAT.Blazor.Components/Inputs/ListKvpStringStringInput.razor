@inherits BaseInput;
@using Microsoft.CST.OAT.Utils;

<div class="row">
    <div class="col">
        <input class="form-control" id="@id" type="text" @bind="CurrentInputKey" />
    </div><div class="col">
        <input class="form-control" type="text" @bind="CurrentInputValue" />
    </div><div class="col">
        <button class="btn-block" @onclick="AddKvp">Add @buttonText</button>
    </div>
</div>
    @if (SubProperty?.Count > 0)
    {
<div class="row">
    <div class="col">
        <select class="form-control" @bind="SelectedKey">
            @for (int i = 0; i < SubProperty.Count; i++)
            {
                <option value="@i">@SubProperty[i].Key : @SubProperty[i].Value</option>
            }
        </select>
    </div>
    <div class="col-4">
        <button @onclick="RemoveKvp">Remove @buttonText</button>
    </div>
</div>        
    }

@code {
    [Parameter]
    public string buttonText { get; set; } = "KVP";

    int SelectedKey { get; set; }

    string CurrentInputKey { get; set; } = string.Empty;

    string CurrentInputValue { get; set; } = string.Empty;

    void RemoveKvp()
    {
        SubProperty?.RemoveAt(SelectedKey);
        onChangeAction.Invoke();
    }

    void AddKvp()
    {
        if (SubProperty is null)
        {
            SubProperty = new List<KeyValuePair<string, string>>();
        }
        SubProperty.Add(new KeyValuePair<string, string>(CurrentInputKey, CurrentInputValue));
        CurrentInputKey = string.Empty;
        CurrentInputValue = string.Empty;
        onChangeAction.Invoke();
    }

    public List<KeyValuePair<string, string>>? SubProperty
    {
        get
        {
            if (Helpers.GetValueByPropertyOrFieldName(Object, SubPath) is List<KeyValuePair<string, string>> val)
            {
                return val;
            }
            return null;
        }
        set
        {
            Helpers.SetValueByPropertyOrFieldName(Object, SubPath, value);
            onChangeAction.Invoke();
        }
    }
}
@inherits BaseInput;

@using Microsoft.CST.OAT.Utils;

<select class="form-control" id="@id" @bind="SelectedType" data-input-type="types-input">
    @for (int i = 0; i < Types.Length; i++)
    {
        @if (UseShortName)
        {
            <option value="@i">@Types[i].Name</option>
        }
        else
        {
            <option value="@i">@Types[i].FullName</option>
        }
    }
</select>

@code {
    [Parameter]
    public bool UseShortName {get; set; }

    [Parameter]
    public Type[] Types { get; set; } = Array.Empty<Type>();

    [Parameter]
    public IntHolder? BindIndex { get; set; }

    int SelectedType
    {
        get
        {
            return _selectedType;
        }
        set {
            _selectedType = value;
            if (BindIndex != null)
            {
                BindIndex.Value = _selectedType;
            }
            Helpers.SetValueByPropertyOrFieldName(Object, SubPath, Types[SelectedType].Name);
            onChangeAction.Invoke();
        }
    }

    protected override void OnInitialized()
    {
        var newIndex = Array.IndexOf(Types, Types.FirstOrDefault(type => type.Name.Equals(Helpers.GetValueByPropertyOrFieldName(Object, SubPath))));
        SelectedType = newIndex < 0 ? 0 : newIndex;
        base.OnInitialized();
    }

    int _selectedType;
}
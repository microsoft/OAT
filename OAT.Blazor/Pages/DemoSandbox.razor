@page "/demosandbox"
@using System.Reflection.Metadata;
@using Microsoft.CodeAnalysis;
@using System.Reflection;
@using Microsoft.CST.OAT.VehicleDemo;
@inject NavigationManager NavigationManager;
@inject Microsoft.CST.OAT.Blazor.AppState AppState;


<h2 class="pb-1">Demo: Sandbox</h2>
<hr class="hr-th" />
<div class="pb-3">
    <button class="btn btn-primary" @onclick="AddObject">Add Vehicle</button>
    <button class="btn btn-primary" @onclick="RemoveLastObject" disabled=@removeDisabled>Remove Last Vehicle</button>
    <button class="btn btn-primary" @onclick="RunRules">Re-Run Rules</button>
</div>

@for (int i = 0; i < AppState.DemoTestObjects.Count; i++)
{
    <div class="card">
        <span>@results[i].Count() rules applied.</span><b>@string.Join(',',results[i].Select(x => x.Name))</b>
        
        <ObjectInput id="@i.ToString()" Object="@AppState.DemoTestObjects[i]" Collapsable="true" onChangeAction="RunRulesSync"/>
    </div>
}

@code {
    Analyzer analyzer = new Analyzer();

    List<IEnumerable<Rule>> results = new List<IEnumerable<Rule>>();

    protected override async Task OnInitializedAsync()
    {
        analyzer.SetOperation(new Microsoft.CST.OAT.VehicleDemo.OverweightOperation(analyzer));
        await RunRules();
        await base.OnInitializedAsync();
    }

    void RunRulesSync()
    {
        results.Clear();
        for (int i = 0; i < AppState.DemoTestObjects.Count; i++)
        {
            results.Add(analyzer.Analyze(AppState.DemoRules, AppState.DemoTestObjects[i]));
        }
        this.StateHasChanged();
    }

    async Task RunRules()
    {
        results = Enumerable.Repeat(Enumerable.Empty<Rule>(), AppState.DemoTestObjects.Count).ToList();
        for (int i = 0; i < AppState.DemoTestObjects.Count; i++)
        {
            await Task.Run(() => results[i] = analyzer.Analyze(AppState.DemoRules, AppState.DemoTestObjects[i]));
        }
        this.StateHasChanged();
    }

    async Task RemoveLastObject()
    {
        if (AppState.DemoTestObjects.Count > 0)
        {
            AppState.DemoTestObjects.RemoveAt(AppState.DemoTestObjects.Count - 1);
        }
        await RunRules();
    }

    async Task AddObject()
    {
        AppState.DemoTestObjects.Add(new Microsoft.CST.OAT.VehicleDemo.Vehicle());
        await RunRules();
    }

    public bool removeDisabled => AppState.DemoTestObjects.Count == 0;


}
